Special Fibonacci

Alex is exploring a series and she came across a special series, in which f(N)=f(N-1) *f(N-1)+f(N-2)*f(N-2)
where f(0) = 1, f(1) = 1
Your task is to help Alex find and return an integer value, representing the N number in this special series.
Note: Return the output modulo 47.
Input Specification:
input1: An integer value N
Output Specification:

Return an integer value, representing the N number in this special series
 input 5
output 20
-->
#include <iostream>
#include <vector>
using namespace std;

// Function to calculate the Nth number in the special Fibonacci series
int specialFibonacci(int N) {
    const int MOD = 47; // Output modulo 47

    // Base cases
    if (N == 0 || N == 1) return 1;

    // Create a vector to store results of the series
    vector<int> f(N + 1, 0);
    f[0] = 1;
    f[1] = 1;

    // Calculate the series iteratively
    for (int i = 2; i <= N; i++) {
        f[i] = (f[i - 1] * f[i - 1] + f[i - 2] * f[i - 2]) % MOD;
    }

    return f[N];
}

int main() {
    int input1;
    cout << "Enter the value of N: ";
    cin >> input1;

    int result = specialFibonacci(input1);
    cout << "Output: " << result << endl;

    return 0;
}
